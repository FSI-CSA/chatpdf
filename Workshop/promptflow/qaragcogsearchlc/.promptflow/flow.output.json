{
  "output": {
    "data_points": [
      "Be Mindful of Your Bug Counts \n\nKeep Track of Bug Metrics \n\nNo Surprises and No Easter Eggs! \n\nTest Phase \n\nShipping and Maintenance Phases \n\nHow Do You Know When You\u2019re Done? \n\nResponse Process \n\nAccountability \n\nSummary\n\n3\n\nSecurity Principles to Live By \n\nSD3: Secure by Design, by Default, and in Deployment \n\nSecure by Design \n\nSecure by Default \n\nSecure in Deployment \n\nSecurity Principles \n\nLearn from Mistakes \n\nMinimize Your Attack Surface \n\nEmploy Secure Defaults \n\nUse Defense in Depth \n\nUse Least Privilege \n\nBackward Compatibility Will Always Give You Grief \n\n34\n\n37\n\n40\n\n41\n\n41\n\n41\n\n43\n\n43\n\n43\n\n44\n\n44\n\n44\n\n45\n\n45\n\n46\n\n46\n\n47\n\n47\n\n47\n\n47\n\n48\n\n49\n\n49\n\n51\n\n51\n\n51\n\n53\n\n53\n\n54\n\n54\n\n57\n\n57\n\n59\n\n60\n\n62\n\n\fA05T617228.fm  Page ix  Monday, October 28, 2002  10:01 AM\n\nTable of Contents\n\nix\n\nAssume External Systems Are Insecure \n\nPlan on Failure \n\nFail to a Secure Mode \n\nRemember That Security Features != Secure Features \n\nNever Depend on Security Through Obscurity Alone \n\nDon\u2019t Mix Code and Data \n\nFix Security Issues Correctly \n\nSummary \n\n4\n\nThreat Modeling \n\nSecure Design Through Threat Modeling \n\nAssemble the Threat-Modeling Team \n\nDecompose the Application \n\nDetermine the Threats to the System \n\nRank the Threats by Decreasing Risk \n\nChoose How to Respond to the Threats \n\nChoose Techniques to Mitigate the Threats \n\nSecurity Techniques \n\nAuthentication \n\nAuthorization \n\nTamper-Resistant and Privacy-Enhanced Technologies \n\nProtect Secrets, or Better Yet, Don\u2019t Store Secrets",
      "Get the Boss to Send an E-Mail \n\nNominate a Security Evangelist \n\nThe Attacker\u2019s Advantage and the Defender\u2019s Dilemma \n\nPrinciple #1: The defender must defend all points; the attacker can choose \nthe weakest point. \n\nPrinciple #2: The defender can defend only against known attacks; the \nattacker can probe for unknown vulnerabilities. \n\nPrinciple #3: The defender must be constantly vigilant; the attacker can \nstrike at will. \n\nPrinciple #4: The defender must play by the rules; the attacker can play dirty. \n\nSummary\n\n2\n\nThe Proactive Security Development Process \n\nProcess Improvements \n\nThe Role of Education \n\nResistance to Mandatory Training \n\nOngoing Training \n\nAdvancing the Science of Security \n\nEducation Proves the More Eyes Fallacy \n\nNow the Evidence! \n\nDesign Phase \n\nSecurity Questions During Interviews \n\nxxiii\n\n3\n\n5\n\n7\n\n7\n\n8\n\n11\n\n13\n\n14\n\n15\n\n19\n\n19\n\n20\n\n20\n\n21\n\n21\n\n23\n\n25\n\n26\n\n29\n\n29\n\n29\n\n31\n\n31\n\n32\n\n33\n\nvii\n\n\fA05T617228.fm  Page viii  Monday, October 28, 2002  10:01 AM\n\nviii\n\nTable of Contents\n\nDefine the Product Security Goals \n\nSecurity Is a Product Feature \n\nMaking Time for Security \n\nThreat Modeling Leads to Secure Design \n\nBuild End-of-Life Plans for Insecure Features \n\nSetting the Bug Bar \n\nSecurity Team Review \n\nDevelopment Phase \n\nBe Hardcore About Who Can Check In New Code (Check-Ins Checked) \n\nSecurity Peer Review of New Code (Check-Ins Checked) \n\nDefine Secure Coding Guidelines \n\nReview Old Defects \n\nExternal Security Review \n\nSecurity Push",
      "Principle of Least Privilege\n\nClean Up After Yourself!\n\nUsing the Security Configuration Editor \n\nLow-Level Security APIs \n\nUsing the Windows Installer \n\nSummary\n\n22\n\nBuilding Privacy into Your Application\n\nMalicious vs. Annoying Invasions of Privacy \n\nMajor Privacy Legislation \n\nPersonally Identifiable Information \n\nThe EU Directives on Data Protection \n\n587\n\n588\n\n606\n\n607\n\n607\n\n609\n\n610\n\n611\n\n611\n\n611\n\n612\n\n612\n\n613\n\n615\n\n617\n\n618\n\n619\n\n620\n\n624\n\n624\n\n625\n\n625\n\n626\n\n627\n\n 628\n\n 630\n\n630\n\n638\n\n638\n\n 640\n\n  641\n\n642\n\n643\n\n643\n\n643\n\n\fA05T617228.fm  Page xx  Monday, October 28, 2002  10:01 AM\n\nxx\n\nTable of Contents\n\nSafe Harbor Principles \n\nOther Privacy Legislation\n\nPrivacy vs. Security \n\nBuilding a Privacy Infrastructure \n\nThe Role of the Chief Privacy Officer \n\nThe Role of the Privacy Advocate\n\nDesigning Privacy-Aware Applications\n\nIncluding Privacy in the Development Process \n\nExploring Privacy Features\n\nSummary\n\n23\n\nGeneral Good Practices \n\nDon\u2019t Tell the Attacker Anything \n\nService Best Practices \n\nSecurity, Services, and the Interactive Desktop \n\nService Account Guidelines \n\nDon\u2019t Leak Information in Banner Strings \n\nBe Careful Changing Error Messages in Fixes \n\nDouble-Check Your Error Paths \n\nKeep It Turned Off! \n\nKernel-Mode Mistakes \n\nHigh-Level Security Issues \n\nHandles \n\nSymbolic Links \n\nQuota \n\nSerialization Primitives \n\nBuffer-Handling Issues \n\nIRP Cancellation \n\nAdd Security Comments to Code \n\nLeverage the Operating System"
    ],
    "answer": "The main security principles to live by are:\n1. SD3: Secure by Design, by Default, and in Deployment\n2. Learn from Mistakes\n3. Minimize Your Attack Surface\n4. Employ Secure Defaults\n5. Use Defense in Depth\n6. Use Least Privilege\n7. Assume External Systems Are Insecure\n8. Plan on Failure\n9. Fail to a Secure Mode\n10. Remember That Security Features != Secure Features\n11. Never Depend on Security Through Obscurity Alone\n12. Don\u2019t Mix Code and Data\n13. Fix Security Issues Correctly\n14. Assume External Systems Are Insecure\n15. Plan on Failure\n16. Fail to a Secure Mode\n17. Remember That Security Features != Secure Features\n18. Never Depend on Security Through Obscurity Alone\n19. Don\u2019t Mix Code and Data\n20. Fix Security Issues Correctly",
    "thoughts": "<br><br>Prompt:<br>Given the following extracted parts of a long document and a question, create a final answer. <br>        If you don't know the answer, just say that you don't know. Don't try to make up an answer. <br>        If the answer is not contained within the text below, say \"I don't know\".<br><br>        ['Be Mindful of Your Bug Counts \\n\\nKeep Track of Bug Metrics \\n\\nNo Surprises and No Easter Eggs! \\n\\nTest Phase \\n\\nShipping and Maintenance Phases \\n\\nHow Do You Know When You\u2019re Done? \\n\\nResponse Process \\n\\nAccountability \\n\\nSummary\\n\\n3\\n\\nSecurity Principles to Live By \\n\\nSD3: Secure by Design, by Default, and in Deployment \\n\\nSecure by Design \\n\\nSecure by Default \\n\\nSecure in Deployment \\n\\nSecurity Principles \\n\\nLearn from Mistakes \\n\\nMinimize Your Attack Surface \\n\\nEmploy Secure Defaults \\n\\nUse Defense in Depth \\n\\nUse Least Privilege \\n\\nBackward Compatibility Will Always Give You Grief \\n\\n34\\n\\n37\\n\\n40\\n\\n41\\n\\n41\\n\\n41\\n\\n43\\n\\n43\\n\\n43\\n\\n44\\n\\n44\\n\\n44\\n\\n45\\n\\n45\\n\\n46\\n\\n46\\n\\n47\\n\\n47\\n\\n47\\n\\n47\\n\\n48\\n\\n49\\n\\n49\\n\\n51\\n\\n51\\n\\n51\\n\\n53\\n\\n53\\n\\n54\\n\\n54\\n\\n57\\n\\n57\\n\\n59\\n\\n60\\n\\n62\\n\\n\\x0cA05T617228.fm  Page ix  Monday, October 28, 2002  10:01 AM\\n\\nTable of Contents\\n\\nix\\n\\nAssume External Systems Are Insecure \\n\\nPlan on Failure \\n\\nFail to a Secure Mode \\n\\nRemember That Security Features != Secure Features \\n\\nNever Depend on Security Through Obscurity Alone \\n\\nDon\u2019t Mix Code and Data \\n\\nFix Security Issues Correctly \\n\\nSummary \\n\\n4\\n\\nThreat Modeling \\n\\nSecure Design Through Threat Modeling \\n\\nAssemble the Threat-Modeling Team \\n\\nDecompose the Application \\n\\nDetermine the Threats to the System \\n\\nRank the Threats by Decreasing Risk \\n\\nChoose How to Respond to the Threats \\n\\nChoose Techniques to Mitigate the Threats \\n\\nSecurity Techniques \\n\\nAuthentication \\n\\nAuthorization \\n\\nTamper-Resistant and Privacy-Enhanced Technologies \\n\\nProtect Secrets, or Better Yet, Don\u2019t Store Secrets', 'Get the Boss to Send an E-Mail \\n\\nNominate a Security Evangelist \\n\\nThe Attacker\u2019s Advantage and the Defender\u2019s Dilemma \\n\\nPrinciple #1: The defender must defend all points; the attacker can choose \\nthe weakest point. \\n\\nPrinciple #2: The defender can defend only against known attacks; the \\nattacker can probe for unknown vulnerabilities. \\n\\nPrinciple #3: The defender must be constantly vigilant; the attacker can \\nstrike at will. \\n\\nPrinciple #4: The defender must play by the rules; the attacker can play dirty. \\n\\nSummary\\n\\n2\\n\\nThe Proactive Security Development Process \\n\\nProcess Improvements \\n\\nThe Role of Education \\n\\nResistance to Mandatory Training \\n\\nOngoing Training \\n\\nAdvancing the Science of Security \\n\\nEducation Proves the More Eyes Fallacy \\n\\nNow the Evidence! \\n\\nDesign Phase \\n\\nSecurity Questions During Interviews \\n\\nxxiii\\n\\n3\\n\\n5\\n\\n7\\n\\n7\\n\\n8\\n\\n11\\n\\n13\\n\\n14\\n\\n15\\n\\n19\\n\\n19\\n\\n20\\n\\n20\\n\\n21\\n\\n21\\n\\n23\\n\\n25\\n\\n26\\n\\n29\\n\\n29\\n\\n29\\n\\n31\\n\\n31\\n\\n32\\n\\n33\\n\\nvii\\n\\n\\x0cA05T617228.fm  Page viii  Monday, October 28, 2002  10:01 AM\\n\\nviii\\n\\nTable of Contents\\n\\nDefine the Product Security Goals \\n\\nSecurity Is a Product Feature \\n\\nMaking Time for Security \\n\\nThreat Modeling Leads to Secure Design \\n\\nBuild End-of-Life Plans for Insecure Features \\n\\nSetting the Bug Bar \\n\\nSecurity Team Review \\n\\nDevelopment Phase \\n\\nBe Hardcore About Who Can Check In New Code (Check-Ins Checked) \\n\\nSecurity Peer Review of New Code (Check-Ins Checked) \\n\\nDefine Secure Coding Guidelines \\n\\nReview Old Defects \\n\\nExternal Security Review \\n\\nSecurity Push', 'Principle of Least Privilege\\n\\nClean Up After Yourself!\\n\\nUsing the Security Configuration Editor \\n\\nLow-Level Security APIs \\n\\nUsing the Windows Installer \\n\\nSummary\\n\\n22\\n\\nBuilding Privacy into Your Application\\n\\nMalicious vs. Annoying Invasions of Privacy \\n\\nMajor Privacy Legislation \\n\\nPersonally Identifiable Information \\n\\nThe EU Directives on Data Protection \\n\\n587\\n\\n588\\n\\n606\\n\\n607\\n\\n607\\n\\n609\\n\\n610\\n\\n611\\n\\n611\\n\\n611\\n\\n612\\n\\n612\\n\\n613\\n\\n615\\n\\n617\\n\\n618\\n\\n619\\n\\n620\\n\\n624\\n\\n624\\n\\n625\\n\\n625\\n\\n626\\n\\n627\\n\\n 628\\n\\n 630\\n\\n630\\n\\n638\\n\\n638\\n\\n 640\\n\\n  641\\n\\n642\\n\\n643\\n\\n643\\n\\n643\\n\\n\\x0cA05T617228.fm  Page xx  Monday, October 28, 2002  10:01 AM\\n\\nxx\\n\\nTable of Contents\\n\\nSafe Harbor Principles \\n\\nOther Privacy Legislation\\n\\nPrivacy vs. Security \\n\\nBuilding a Privacy Infrastructure \\n\\nThe Role of the Chief Privacy Officer \\n\\nThe Role of the Privacy Advocate\\n\\nDesigning Privacy-Aware Applications\\n\\nIncluding Privacy in the Development Process \\n\\nExploring Privacy Features\\n\\nSummary\\n\\n23\\n\\nGeneral Good Practices \\n\\nDon\u2019t Tell the Attacker Anything \\n\\nService Best Practices \\n\\nSecurity, Services, and the Interactive Desktop \\n\\nService Account Guidelines \\n\\nDon\u2019t Leak Information in Banner Strings \\n\\nBe Careful Changing Error Messages in Fixes \\n\\nDouble-Check Your Error Paths \\n\\nKeep It Turned Off! \\n\\nKernel-Mode Mistakes \\n\\nHigh-Level Security Issues \\n\\nHandles \\n\\nSymbolic Links \\n\\nQuota \\n\\nSerialization Primitives \\n\\nBuffer-Handling Issues \\n\\nIRP Cancellation \\n\\nAdd Security Comments to Code \\n\\nLeverage the Operating System']<br>        Question: What are the main security principles to live by?<br>        ",
    "sources": "\nhttps://dataaiopenaistor.blob.core.windows.net/chatpdf/Writing%20Secure%20Code.pdf",
    "nextQuestions": "<1> What are the security principles to live by?\n<2> How can we ensure secure design, by default, and in deployment?\n<3> What are some general good practices for security?",
    "error": ""
  }
}